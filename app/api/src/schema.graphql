type Movie {
  id: Int
  title: String
  genres: [Genre] @relation(name: "IN_GENRE", direction: "OUT")
  actors: [Person] @relation(name: "ACTED_IN", direction: "IN")
  director: [Person] @relation(name: "DIRECTED", direction: "IN")
  keywords: [Keyword] @relation(name: "HAS_KEYWORD", direction: "OUT")
  poster_url: String
    @cypher(
      statement: """
        MATCH (this)-[:HAS_POSTER]->(p:Poster)
        RETURN p.poster_url
        """
    )
  likes: Int @cypher(statement: "OPTIONAL MATCH (:User)-[l:LIKES]->(this) RETURN COUNT(l.score)")
}

type User {
  id: String
  name: String
  email: String
  similarity(curr_id:String): Float
    @cypher(
      statement: """
        MATCH (p1:User {id: curr_id})-[x:LIKES]->(m:Movie)<-[y:LIKES]-(this)
        WITH COUNT(m) AS numbermovies, SUM(x.score * y.score) AS xyDotProduct,
        SQRT(REDUCE(xDot = 0.0, a IN COLLECT(x.score) | xDot + a^2)) AS xLength,
        SQRT(REDUCE(yDot = 0.0, b IN COLLECT(y.score) | yDot + b^2)) AS yLength,
        p1, this WHERE numbermovies > 5
        RETURN xyDotProduct / (xLength * yLength) as sim
      """
    )

}

type Genre {
  id: Int
  name: String
}

type Person {
  id: Int
  name: String
}

type Keyword {
  id: Int
  name: String
}

type Poster {
  poster_url: String
}

type Mutation {
  rateMovie(user_id:String!, user_name:String!, user_email:String!, movie_id:Int!, score:Int!): Int
    @cypher(
      statement:"""
        MERGE (u:User {id:$user_id, name:$user_name, email:$user_email})
        WITH u
        MATCH (m:Movie {id:$movie_id})
        WITH u, m
        MERGE (u)-[l:LIKES]->(m)
        SET l.score=$score
        RETURN l.score
      """
    )

  favoriteMovie(user_id:String!, user_name:String!, user_email:String!, movie_id:Int!): String
    @cypher(
      statement:"""
        MERGE (u:User {id:$user_id, name:$user_name, email:$user_email})
        WITH u
        MATCH (m:Movie {id:$movie_id})
        WITH u, m
        MERGE (u)-[:FAVORITE]->(m)
        RETURN u.name
      """
    )

  removeFavorite(user_id: String!, movie_id: Int!): String
  @cypher(
    statement:"""
      MATCH(u:User{id:$user_id})
      MATCH(m:Movie{id:$movie_id})
      WITH u,m
      MERGE (u)-[f:FAVORITE]->(m)
      DELETE f
    """
  )
}

type Query {
  moviesByTitle(substring: String = "inc"): [Movie]
    @cypher(
      statement: "MATCH (m:Movie) WHERE m.title CONTAINS $substring RETURN m"
    )

  recommendedMovies(user_id:String): [Movie]
    @cypher(
      statement: """
      MATCH (m:Movie)
      OPTIONAL MATCH (u:User {id:$user_id})-[l:LIKES{score:1}]->(m:Movie)
      WITH m, u ORDER BY l LIMIT 20
      MATCH (m)-[:IN_GENRE]->(g:Genre)<-[:IN_GENRE]-(rec:Movie) WHERE NOT ((u)-[:LIKES]->(rec) OR (u)-[:FAVORITE]->(rec))

        WITH m, rec, COUNT(*) AS gs ORDER BY gs DESC LIMIT 10

        OPTIONAL MATCH (m)<-[:ACTED_IN]-(a:Person)-[:ACTED_IN]->(rec)
        WITH m, rec, gs, COUNT(a) AS as

        OPTIONAL MATCH (m)<-[:DIRECTED]-(d:Person)-[:DIRECTED]->(rec)
        WITH m, rec, gs, as, COUNT(d) AS ds

        OPTIONAL MATCH (m)-[:HAS_KEYWORD]->(k:Keyword)<-[:HAS_KEYWORD]-(rec)
        WITH m, rec, gs, as, ds, COUNT(k) AS ks

        WITH rec, gs, as, ds, ks, (1*gs)+(1*as)+(1*ds)+(1*ks) AS score ORDER BY score DESC LIMIT 10
        RETURN rec
      """
    )

  userFavoriteMovies(user_id:String): [Movie]
  @cypher(
    statement: """
      MATCH (u:User {id:$user_id})
      WITH u
      MATCH(u) - [:FAVORITE] -> (m:Movie)
      return m
    """
  )
}
